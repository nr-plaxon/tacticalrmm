{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tactical RMM Documentation \u00b6 Tactical RMM is a remote monitoring & management tool for Windows computers, built with Django, Vue and Golang. It uses an agent written in Golang and integrates with MeshCentral LIVE DEMO \u00b6 Tactical RMM is currently in alpha and subject to breaking changes. Use in production at your own risk. Features \u00b6 Teamviewer-like remote desktop control Real-time remote shell Remote file browser (download and upload files) Remote command and script execution (batch, powershell and python scripts) Event log viewer Services management Windows patch management Automated checks with email/SMS alerting (cpu, disk, memory, services, scripts, event logs) Automated task runner (run scripts on a schedule) Remote software installation via chocolatey Software and hardware inventory","title":"Home"},{"location":"#tactical-rmm-documentation","text":"Tactical RMM is a remote monitoring & management tool for Windows computers, built with Django, Vue and Golang. It uses an agent written in Golang and integrates with MeshCentral","title":"Tactical RMM Documentation"},{"location":"#live-demo","text":"Tactical RMM is currently in alpha and subject to breaking changes. Use in production at your own risk.","title":"LIVE DEMO"},{"location":"#features","text":"Teamviewer-like remote desktop control Real-time remote shell Remote file browser (download and upload files) Remote command and script execution (batch, powershell and python scripts) Event log viewer Services management Windows patch management Automated checks with email/SMS alerting (cpu, disk, memory, services, scripts, event logs) Automated task runner (run scripts on a schedule) Remote software installation via chocolatey Software and hardware inventory","title":"Features"},{"location":"alerting/","text":"Alerting Overview \u00b6 Notification Types \u00b6 Email Alerts - Sends email SMS Alerts - Sends text message Dashboard Alerts - Adds a notification in the dashboard alert icon Alert Severities \u00b6 Informational Warning Error Agents \u00b6 Agent offline alerts always have an error severity. Checks \u00b6 Checks can be configured to create alerts with different severities Memory and Cpuload checks can be configured with a warning and error threshold. To disable one of them put in a 0. Script checks allow for information and warning return codes. Everything else, besides a 0 will result in an error severity. Event Log, service, and ping checks require you to set the severity to information, warning, or error. Automated Tasks \u00b6 For automated tasks, you set the what the alert severity should be directly on the task. Configure Alert Templates \u00b6 Alert template allow you to setup alerting and notifications on many agents at once. Alert templates can be applied to Sites, Client, Automation Policies, and in the Global Settings. To create an alert template, go to Settings > Alerts Manager. Then click New In the form, give the alert template a name and make sure it is enabled. Optionally setup any of the below settings: * Failure Action - Runs the selected script once on any agent. This is useful for running one-time tasks like sending an http request to an external system to create a ticket. * Failure action args - Optionally pass in arguments to the failure script. * Failure action timeout - Sets the timeout for the script. * Resolved action - Runs the selected script once on any agent if the alert is resolved. This is useful for running onetime tasks like sending an http request to an external system to close the ticket that was created. * Resolved action args - Optionally pass in arguments to the resolved script. * Resolved action timeout - Sets the timeout for the script. * Email Recipients - Overrides the default email recipients in Global Settings. * From Email - Overrides the From email address in Global Settings. * SMS Recipients - Overrides the SMS recipients in Global Settings. * Include desktops - Will apply to desktops agent/check/task settings \u00b6 Email on resolved - Sends a email when the alert clears Text on resolved - Sends a text when the alert clears Always email - This enables the email notification setting on the agent/check/task Always sms - This enables the text notification setting on the agent/check/task Always dashboard alert - This enables the dashboard alert notification setting on the agent/check/task Periodic notification - This sets up a periodic notification on for the agent/check/task alert Alert on severity - When configured, will only send a notification through the corresponding channel if the alert is of the specified severity Applying Alert Templates \u00b6 Alerts are applied in the following over. The agent picks the closest matching alert template. Right-click on any Client or Site and go to Assign Alert Template In Automation Manager, click on Assign Alert Template for the policy you want to apply it to In Global Settings, select the default alert template Policy w/ Alert Template applied to Site Site Policy w/ Alert Template applied to Client Client Default Alert Template","title":"Alerting"},{"location":"alerting/#alerting-overview","text":"","title":"Alerting Overview"},{"location":"alerting/#notification-types","text":"Email Alerts - Sends email SMS Alerts - Sends text message Dashboard Alerts - Adds a notification in the dashboard alert icon","title":"Notification Types"},{"location":"alerting/#alert-severities","text":"Informational Warning Error","title":"Alert Severities"},{"location":"alerting/#agents","text":"Agent offline alerts always have an error severity.","title":"Agents"},{"location":"alerting/#checks","text":"Checks can be configured to create alerts with different severities Memory and Cpuload checks can be configured with a warning and error threshold. To disable one of them put in a 0. Script checks allow for information and warning return codes. Everything else, besides a 0 will result in an error severity. Event Log, service, and ping checks require you to set the severity to information, warning, or error.","title":"Checks"},{"location":"alerting/#automated-tasks","text":"For automated tasks, you set the what the alert severity should be directly on the task.","title":"Automated Tasks"},{"location":"alerting/#configure-alert-templates","text":"Alert template allow you to setup alerting and notifications on many agents at once. Alert templates can be applied to Sites, Client, Automation Policies, and in the Global Settings. To create an alert template, go to Settings > Alerts Manager. Then click New In the form, give the alert template a name and make sure it is enabled. Optionally setup any of the below settings: * Failure Action - Runs the selected script once on any agent. This is useful for running one-time tasks like sending an http request to an external system to create a ticket. * Failure action args - Optionally pass in arguments to the failure script. * Failure action timeout - Sets the timeout for the script. * Resolved action - Runs the selected script once on any agent if the alert is resolved. This is useful for running onetime tasks like sending an http request to an external system to close the ticket that was created. * Resolved action args - Optionally pass in arguments to the resolved script. * Resolved action timeout - Sets the timeout for the script. * Email Recipients - Overrides the default email recipients in Global Settings. * From Email - Overrides the From email address in Global Settings. * SMS Recipients - Overrides the SMS recipients in Global Settings. * Include desktops - Will apply to desktops","title":"Configure Alert Templates"},{"location":"alerting/#agentchecktask-settings","text":"Email on resolved - Sends a email when the alert clears Text on resolved - Sends a text when the alert clears Always email - This enables the email notification setting on the agent/check/task Always sms - This enables the text notification setting on the agent/check/task Always dashboard alert - This enables the dashboard alert notification setting on the agent/check/task Periodic notification - This sets up a periodic notification on for the agent/check/task alert Alert on severity - When configured, will only send a notification through the corresponding channel if the alert is of the specified severity","title":"agent/check/task settings"},{"location":"alerting/#applying-alert-templates","text":"Alerts are applied in the following over. The agent picks the closest matching alert template. Right-click on any Client or Site and go to Assign Alert Template In Automation Manager, click on Assign Alert Template for the policy you want to apply it to In Global Settings, select the default alert template Policy w/ Alert Template applied to Site Site Policy w/ Alert Template applied to Client Client Default Alert Template","title":"Applying Alert Templates"},{"location":"backup/","text":"Backing up the RMM \u00b6 A backup script is provided for quick and easy way to backup all settings into one file to move to another server. Download the backup script: wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/backup.sh From the Web UI, click Tools > Server Maintenance Choose Prune DB Tables from the dropdown and check the Audit Log and Pending Actions checkboxes, and then click Submit Doing a prune first before running the backup will significantly speed up the postgres vacuum command that is run during backup. Run the backup script chmod +x backup.sh ./backup.sh The backup tar file will be saved in /rmmbackups with the following format: rmm-backup-CURRENTDATETIME.tar","title":"Backup"},{"location":"backup/#backing-up-the-rmm","text":"A backup script is provided for quick and easy way to backup all settings into one file to move to another server. Download the backup script: wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/backup.sh From the Web UI, click Tools > Server Maintenance Choose Prune DB Tables from the dropdown and check the Audit Log and Pending Actions checkboxes, and then click Submit Doing a prune first before running the backup will significantly speed up the postgres vacuum command that is run during backup. Run the backup script chmod +x backup.sh ./backup.sh The backup tar file will be saved in /rmmbackups with the following format: rmm-backup-CURRENTDATETIME.tar","title":"Backing up the RMM"},{"location":"contributing/","text":"Contributing \u00b6 Contributing to the docs \u00b6 Docs are built with MKDocs for Material To setup a local environment to add/edit to this documentation site: mkdir ~/rmmdocs && cd ~/rmmdocs git clone https://github.com/wh1te909/tacticalrmm.git . python3 -m venv env source env/bin/activate pip install --upgrade pip pip install --upgrade setuptools wheel pip install -r api/tacticalrmm/requirements-dev.txt cd docs mkdocs serve Open your browser and navigate to http://yourserverip:8005 Add/edit markdown files in the docs/docs folder and you'll see live changes at the url above. Edit docs/mkdocs.yml to edit structure and add new files. Full mkdocs documentation here Once finished, create a pull request to the develop branch for review.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#contributing-to-the-docs","text":"Docs are built with MKDocs for Material To setup a local environment to add/edit to this documentation site: mkdir ~/rmmdocs && cd ~/rmmdocs git clone https://github.com/wh1te909/tacticalrmm.git . python3 -m venv env source env/bin/activate pip install --upgrade pip pip install --upgrade setuptools wheel pip install -r api/tacticalrmm/requirements-dev.txt cd docs mkdocs serve Open your browser and navigate to http://yourserverip:8005 Add/edit markdown files in the docs/docs folder and you'll see live changes at the url above. Edit docs/mkdocs.yml to edit structure and add new files. Full mkdocs documentation here Once finished, create a pull request to the develop branch for review.","title":"Contributing to the docs"},{"location":"faq/","text":"FAQ \u00b6 How do I do X feature in the web UI? \u00b6 Alot of features in the web UI are hidden behind right-click menus; almost everything has a right click menu so if you don't see something, try right clicking on it. Where are the Linux / Mac agents? \u00b6 Linux / Mac agents are currently under development. Can I run Tactical RMM locally behind NAT without exposing anything to the internet? \u00b6 Yes, you will just need to setup local DNS for the 3 subdomains, either by editing host files on all your agents or through a local DNS server. I am locked out of the web UI. How do I reset my password? \u00b6 SSH into your server and run: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_password <username> How do I reset password or 2 factor token? \u00b6 From the web UI, click Settings > User Administration and then right-click on a user: Or from the command line: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_2fa <username> Then simply log out of the web UI and next time the user logs in they will be redirected to the 2FA setup page which will present a barcode to be scanned with the Authenticator app. How do I recover my MeshCentral login credentials? \u00b6 From Tactical's web UI: Settings > Global Settings > MeshCentral Copy the username then ssh into the server and run: cd /meshcentral/ sudo systemctl stop meshcentral node node_modules/meshcentral --resetaccount <username> --pass <newpassword> sudo systemctl start meshcentral","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#how-do-i-do-x-feature-in-the-web-ui","text":"Alot of features in the web UI are hidden behind right-click menus; almost everything has a right click menu so if you don't see something, try right clicking on it.","title":"How do I do X feature in the web UI?"},{"location":"faq/#where-are-the-linux-mac-agents","text":"Linux / Mac agents are currently under development.","title":"Where are the Linux / Mac agents?"},{"location":"faq/#can-i-run-tactical-rmm-locally-behind-nat-without-exposing-anything-to-the-internet","text":"Yes, you will just need to setup local DNS for the 3 subdomains, either by editing host files on all your agents or through a local DNS server.","title":"Can I run Tactical RMM locally behind NAT without exposing anything to the internet?"},{"location":"faq/#i-am-locked-out-of-the-web-ui-how-do-i-reset-my-password","text":"SSH into your server and run: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_password <username>","title":"I am locked out of the web UI. How do I reset my password?"},{"location":"faq/#how-do-i-reset-password-or-2-factor-token","text":"From the web UI, click Settings > User Administration and then right-click on a user: Or from the command line: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_2fa <username> Then simply log out of the web UI and next time the user logs in they will be redirected to the 2FA setup page which will present a barcode to be scanned with the Authenticator app.","title":"How do I reset password or 2 factor token?"},{"location":"faq/#how-do-i-recover-my-meshcentral-login-credentials","text":"From Tactical's web UI: Settings > Global Settings > MeshCentral Copy the username then ssh into the server and run: cd /meshcentral/ sudo systemctl stop meshcentral node node_modules/meshcentral --resetaccount <username> --pass <newpassword> sudo systemctl start meshcentral","title":"How do I recover my MeshCentral login credentials?"},{"location":"install_agent/","text":"Installing an agent \u00b6 Warning You must add antivirus exlusions for the tactical agent. Any decent AV will flag the agent as a virus, since it technically is one due to the nature of this software. Adding the following exlucions will make sure everything works, including agent update: C:\\Program Files\\TacticalAgent\\* C:\\Program Files\\Mesh Agent\\* C:\\Windows\\Temp\\winagent-v*.exe C:\\Windows\\Temp\\trmm\\* Dynamically generated executable \u00b6 The generated exe is simply a wrapper around the Manual install method, using a single exe/command without the need to pass any command line flags to the installer. All it does is download the generic installer from the agent's github release page and call it using predefined command line args that you choose from the web UI. It \"bakes\" the command line args into the executable. From the UI, click Agents > Install Agent You can also right click on a site > Install Agent . This will automatically fill in the client/site dropdown for you. Powershell \u00b6 The powershell method is very similar to the generated exe in that it simply downloads the installer from github and calls the exe for you. Manual \u00b6 The manual installation method requires you to first download the generic installer and call it using command line args. This is useful for scripting the installation using Group Policy or some other batch deployment method. Tip You can reuse the installer for any of the deployment methods, you don't need to constantly create a new installer for each new agent. The installer will be valid for however long you specify the token expiry time when generating an agent. Using a deployment link \u00b6 Creating a deployment link is the recommended way to deploy agents. The main benefit of this method is that the exectuable is generated only whenever the deployment download link is accessed, whereas with the other methods it's generated right away and the agent's version hardcoded into the exe. Using a deployment link will allow you to not worry about installing using an older version of an agent, which will fail to install if you have updated your RMM to a version that is not compatible with an older installer you might have lying around. To create a deployment, from the web UI click Agents > Manage Deployments . Tip Create a client/site named \"Default\" and create a deployment for it with a very long expiry to have a generic installer that can be deployed anytime at any client/site. You can then move the agent into the correct client/site from the web UI after it's been installed. Copy/paste the download link from the deployment into your browser. It will take a few seconds to dynamically generate the executable and then your browser will automatically download the exe. Optional installer args \u00b6 The following optional arguments can be passed to any of the installation method executables: -log debug Will print very verbose logging during agent install. Useful for troubleshooting agent install. -silent This will not popup any message boxes during install, either any error messages or the \"Installation was successfull\" message box that pops up at the end of a successfull install.","title":"Agent Installation"},{"location":"install_agent/#installing-an-agent","text":"Warning You must add antivirus exlusions for the tactical agent. Any decent AV will flag the agent as a virus, since it technically is one due to the nature of this software. Adding the following exlucions will make sure everything works, including agent update: C:\\Program Files\\TacticalAgent\\* C:\\Program Files\\Mesh Agent\\* C:\\Windows\\Temp\\winagent-v*.exe C:\\Windows\\Temp\\trmm\\*","title":"Installing an agent"},{"location":"install_agent/#dynamically-generated-executable","text":"The generated exe is simply a wrapper around the Manual install method, using a single exe/command without the need to pass any command line flags to the installer. All it does is download the generic installer from the agent's github release page and call it using predefined command line args that you choose from the web UI. It \"bakes\" the command line args into the executable. From the UI, click Agents > Install Agent You can also right click on a site > Install Agent . This will automatically fill in the client/site dropdown for you.","title":"Dynamically generated executable"},{"location":"install_agent/#powershell","text":"The powershell method is very similar to the generated exe in that it simply downloads the installer from github and calls the exe for you.","title":"Powershell"},{"location":"install_agent/#manual","text":"The manual installation method requires you to first download the generic installer and call it using command line args. This is useful for scripting the installation using Group Policy or some other batch deployment method. Tip You can reuse the installer for any of the deployment methods, you don't need to constantly create a new installer for each new agent. The installer will be valid for however long you specify the token expiry time when generating an agent.","title":"Manual"},{"location":"install_agent/#using-a-deployment-link","text":"Creating a deployment link is the recommended way to deploy agents. The main benefit of this method is that the exectuable is generated only whenever the deployment download link is accessed, whereas with the other methods it's generated right away and the agent's version hardcoded into the exe. Using a deployment link will allow you to not worry about installing using an older version of an agent, which will fail to install if you have updated your RMM to a version that is not compatible with an older installer you might have lying around. To create a deployment, from the web UI click Agents > Manage Deployments . Tip Create a client/site named \"Default\" and create a deployment for it with a very long expiry to have a generic installer that can be deployed anytime at any client/site. You can then move the agent into the correct client/site from the web UI after it's been installed. Copy/paste the download link from the deployment into your browser. It will take a few seconds to dynamically generate the executable and then your browser will automatically download the exe.","title":"Using a deployment link"},{"location":"install_agent/#optional-installer-args","text":"The following optional arguments can be passed to any of the installation method executables: -log debug Will print very verbose logging during agent install. Useful for troubleshooting agent install. -silent This will not popup any message boxes during install, either any error messages or the \"Installation was successfull\" message box that pops up at the end of a successfull install.","title":"Optional installer args"},{"location":"install_docker/","text":"Docker Setup \u00b6 Install docker and docker-compose Obtain valid wildcard certificate for your domain. If certificates are not provided, a self-signed certificate will be generated and most agent functions won't work. See below on how to generate a free Let's Encrypt! Generate certificates with certbot \u00b6 Install Certbot sudo apt-get install certbot Generate the wildcard certificate. Add the DNS entry for domain validation. Replace example.com with your root doamin sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns Configure DNS and firewall \u00b6 You will need to add DNS entries so that the three subdomains resolve to the IP of the docker host. There is a reverse proxy running that will route the hostnames to the correct container. On the host, you will need to ensure the firewall is open on tcp ports 80, 443 and 4222. Setting up the environment \u00b6 Get the docker-compose and .env.example file on the host you which to install on wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/docker-compose.yml wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/.env.example mv .env.example .env Change the values in .env to match your environment. If you are supplying certificates through Let's Encrypt or another source, see the section below about base64 encoding the certificate files. Base64 encoding certificates to pass as env variables \u00b6 Use the below command to add the the correct values to the .env. Running this command multiple times will add redundant entries, so those will need to be removed. Let's encrypt certs paths are below. Replace ${rootdomain} with your own. public key /etc/letsencrypt/live/${rootdomain}/fullchain.pem private key /etc/letsencrypt/live/${rootdomain}/privkey.pem echo \"CERT_PUB_KEY=$(sudo base64 -w 0 /path/to/pub/key)\" >> .env echo \"CERT_PRIV_KEY=$(sudo base64 -w 0 /path/to/priv/key)\" >> .env Starting the environment \u00b6 Run the below command to start the environment. sudo docker-compose up -d Removing the -d will start the containers in the foreground and is useful for debugging. Get MeshCentral EXE download link \u00b6 Run the below command to get the download link for the mesh central exe. This needs to be uploaded on first successful signin. sudo docker-compose exec tactical-backend python manage.py get_mesh_exe_url","title":"Docker Install"},{"location":"install_docker/#docker-setup","text":"Install docker and docker-compose Obtain valid wildcard certificate for your domain. If certificates are not provided, a self-signed certificate will be generated and most agent functions won't work. See below on how to generate a free Let's Encrypt!","title":"Docker Setup"},{"location":"install_docker/#generate-certificates-with-certbot","text":"Install Certbot sudo apt-get install certbot Generate the wildcard certificate. Add the DNS entry for domain validation. Replace example.com with your root doamin sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns","title":"Generate certificates with certbot"},{"location":"install_docker/#configure-dns-and-firewall","text":"You will need to add DNS entries so that the three subdomains resolve to the IP of the docker host. There is a reverse proxy running that will route the hostnames to the correct container. On the host, you will need to ensure the firewall is open on tcp ports 80, 443 and 4222.","title":"Configure DNS and firewall"},{"location":"install_docker/#setting-up-the-environment","text":"Get the docker-compose and .env.example file on the host you which to install on wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/docker-compose.yml wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/.env.example mv .env.example .env Change the values in .env to match your environment. If you are supplying certificates through Let's Encrypt or another source, see the section below about base64 encoding the certificate files.","title":"Setting up the environment"},{"location":"install_docker/#base64-encoding-certificates-to-pass-as-env-variables","text":"Use the below command to add the the correct values to the .env. Running this command multiple times will add redundant entries, so those will need to be removed. Let's encrypt certs paths are below. Replace ${rootdomain} with your own. public key /etc/letsencrypt/live/${rootdomain}/fullchain.pem private key /etc/letsencrypt/live/${rootdomain}/privkey.pem echo \"CERT_PUB_KEY=$(sudo base64 -w 0 /path/to/pub/key)\" >> .env echo \"CERT_PRIV_KEY=$(sudo base64 -w 0 /path/to/priv/key)\" >> .env","title":"Base64 encoding certificates to pass as env variables"},{"location":"install_docker/#starting-the-environment","text":"Run the below command to start the environment. sudo docker-compose up -d Removing the -d will start the containers in the foreground and is useful for debugging.","title":"Starting the environment"},{"location":"install_docker/#get-meshcentral-exe-download-link","text":"Run the below command to get the download link for the mesh central exe. This needs to be uploaded on first successful signin. sudo docker-compose exec tactical-backend python manage.py get_mesh_exe_url","title":"Get MeshCentral EXE download link"},{"location":"install_server/","text":"Installation \u00b6 Minimum requirements \u00b6 A fresh linux VM running either Ubuntu 20.04 or Debian 10, with a minimum of 2GB RAM. Warning The provided install script assumes a fresh server with no software installed on it. Attempting to run it on an existing server with other services will break things and the install will fail. The install script has been tested on the following public cloud providers: DigitalOcean, Linode, Vultr, BuyVM (highly recommended), Hetzner, AWS, Google Cloud and Azure, as well as behind NAT on Hyper-V, Proxmox and ESXi. A real domain is needed to generate a Let's Encrypt wildcard cert. If you cannot afford to purchase a domain ($12 a year) then you can get one for free at freenom.com A TOTP based authenticator app. Some popular ones are Google Authenticator, Authy and Microsoft Authenticator. Install \u00b6 Run updates and setup the linux user \u00b6 SSH into the server as root . Download and run the prereqs and latest updates apt update apt install -y wget curl sudo apt -y upgrade If a new kernel is installed, then reboot the server with the reboot command Create a linux user to run the rmm and add it to the sudoers group. For this example we'll be using a user named tactical but feel free to create whatever name you want. adduser tactical usermod -a -G sudo tactical Tip Enable passwordless sudo to make your life easier Setup the firewall (optional but highly recommended) \u00b6 Info Skip this step if your VM is not publicly exposed to the world e.g. running behind NAT. You should setup the firewall rules in your router instead (ports 22, 443 and 4222 TCP). ufw default deny incoming ufw default allow outgoing ufw allow https ufw allow proto tcp from any to any port 4222 Info SSH is only required for you to remotely login and do basic linux server administration for your rmm. It is not needed for any agent communication. Allow ssh from everywhere ( not recommended) ufw allow ssh Allow ssh from only allowed IP's ( highly recommended) ufw allow proto tcp from X.X.X.X to any port 22 ufw allow proto tcp from X.X.X.X to any port 22 Enable and activate the firewall ufw enable && ufw reload Create the A records \u00b6 We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accesing your RMM from the browser, the REST backend e.g. api.example.com and Meshcentral e.g. mesh.example.com Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server: Run the install script \u00b6 Switch to the tactical user su - tactical Download and run the install script wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/install.sh chmod +x install.sh ./install.sh Answer the initial questions when prompted. Replace example.com with your domain. Deploy the TXT record in your DNS manager: \u00b6 Warning TXT records can take anywhere from 1 minute to a few hours to propogate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com Create a login for the RMM web UI: A bunch of URLS / usernames / passwords will be printed out at the end of the install script. Save these somewhere safe. Recover them if you didn't Copy the url for the meshagent exe ( https://mesh.example.com/agentinvite?c=...... ), paste it in your browser and download the mesh agent: Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site, choose the default timezone and then upload the mesh agent you just downloaded.","title":"Traditional Install"},{"location":"install_server/#installation","text":"","title":"Installation"},{"location":"install_server/#minimum-requirements","text":"A fresh linux VM running either Ubuntu 20.04 or Debian 10, with a minimum of 2GB RAM. Warning The provided install script assumes a fresh server with no software installed on it. Attempting to run it on an existing server with other services will break things and the install will fail. The install script has been tested on the following public cloud providers: DigitalOcean, Linode, Vultr, BuyVM (highly recommended), Hetzner, AWS, Google Cloud and Azure, as well as behind NAT on Hyper-V, Proxmox and ESXi. A real domain is needed to generate a Let's Encrypt wildcard cert. If you cannot afford to purchase a domain ($12 a year) then you can get one for free at freenom.com A TOTP based authenticator app. Some popular ones are Google Authenticator, Authy and Microsoft Authenticator.","title":"Minimum requirements"},{"location":"install_server/#install","text":"","title":"Install"},{"location":"install_server/#run-updates-and-setup-the-linux-user","text":"SSH into the server as root . Download and run the prereqs and latest updates apt update apt install -y wget curl sudo apt -y upgrade If a new kernel is installed, then reboot the server with the reboot command Create a linux user to run the rmm and add it to the sudoers group. For this example we'll be using a user named tactical but feel free to create whatever name you want. adduser tactical usermod -a -G sudo tactical Tip Enable passwordless sudo to make your life easier","title":"Run updates and setup the linux user"},{"location":"install_server/#setup-the-firewall-optional-but-highly-recommended","text":"Info Skip this step if your VM is not publicly exposed to the world e.g. running behind NAT. You should setup the firewall rules in your router instead (ports 22, 443 and 4222 TCP). ufw default deny incoming ufw default allow outgoing ufw allow https ufw allow proto tcp from any to any port 4222 Info SSH is only required for you to remotely login and do basic linux server administration for your rmm. It is not needed for any agent communication. Allow ssh from everywhere ( not recommended) ufw allow ssh Allow ssh from only allowed IP's ( highly recommended) ufw allow proto tcp from X.X.X.X to any port 22 ufw allow proto tcp from X.X.X.X to any port 22 Enable and activate the firewall ufw enable && ufw reload","title":"Setup the firewall (optional but highly recommended)"},{"location":"install_server/#create-the-a-records","text":"We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accesing your RMM from the browser, the REST backend e.g. api.example.com and Meshcentral e.g. mesh.example.com Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server:","title":"Create the A records"},{"location":"install_server/#run-the-install-script","text":"Switch to the tactical user su - tactical Download and run the install script wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/install.sh chmod +x install.sh ./install.sh Answer the initial questions when prompted. Replace example.com with your domain.","title":"Run the install script"},{"location":"install_server/#deploy-the-txt-record-in-your-dns-manager","text":"Warning TXT records can take anywhere from 1 minute to a few hours to propogate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com Create a login for the RMM web UI: A bunch of URLS / usernames / passwords will be printed out at the end of the install script. Save these somewhere safe. Recover them if you didn't Copy the url for the meshagent exe ( https://mesh.example.com/agentinvite?c=...... ), paste it in your browser and download the mesh agent: Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site, choose the default timezone and then upload the mesh agent you just downloaded.","title":"Deploy the TXT record in your DNS manager:"},{"location":"license/","text":"MIT License Copyright (c) 2019-present wh1te909 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"management_cmds/","text":"Management Commands \u00b6 To run any of the management commands you must first activate the python virtual env: cd /rmm/api/tacticalrmm source ../env/bin/activate Reset a user's password \u00b6 python manage.py reset_password <username> Reset a user's 2fa token \u00b6 python manage.py reset_2fa <username> Find all agents that have X software installed \u00b6 python manage.py find_software \"adobe\" Show outdated online agents \u00b6 python manage.py show_outdated_agents Log out all active web sessions \u00b6 python manage.py delete_tokens Check for orphaned tasks on all agents and remove them \u00b6 python manage.py remove_orphaned_tasks Create a MeshCentral agent invite link \u00b6 python manage.py get_mesh_exe_url Bulk update agent offline/overdue time \u00b6 wget -q https://raw.githubusercontent.com/wh1te909/tacticalrmm/develop/api/tacticalrmm/agents/management/commands/bulk_change_checkin.py -O /rmm/api/tacticalrmm/agents/management/commands/bulk_change_checkin.py Examples: Change offline time on all agents to 5 minutes python manage.py bulk_change_checkin --offline --all 5 Change overdue time on all agents to 10 minutes python manage.py bulk_change_checkin --overdue --all 10 Change overdue time on all agents in client named Example Client to 12 minutes python manage.py bulk_change_checkin --overdue --client \"Example Client\" 12 Change offline time on all agents in site named Example Site to 2 minutes python manage.py bulk_change_checkin --offline --site \"Example Site\" 2","title":"Management Commands"},{"location":"management_cmds/#management-commands","text":"To run any of the management commands you must first activate the python virtual env: cd /rmm/api/tacticalrmm source ../env/bin/activate","title":"Management Commands"},{"location":"management_cmds/#reset-a-users-password","text":"python manage.py reset_password <username>","title":"Reset a user's password"},{"location":"management_cmds/#reset-a-users-2fa-token","text":"python manage.py reset_2fa <username>","title":"Reset a user's 2fa token"},{"location":"management_cmds/#find-all-agents-that-have-x-software-installed","text":"python manage.py find_software \"adobe\"","title":"Find all agents that have X software installed"},{"location":"management_cmds/#show-outdated-online-agents","text":"python manage.py show_outdated_agents","title":"Show outdated online agents"},{"location":"management_cmds/#log-out-all-active-web-sessions","text":"python manage.py delete_tokens","title":"Log out all active web sessions"},{"location":"management_cmds/#check-for-orphaned-tasks-on-all-agents-and-remove-them","text":"python manage.py remove_orphaned_tasks","title":"Check for orphaned tasks on all agents and remove them"},{"location":"management_cmds/#create-a-meshcentral-agent-invite-link","text":"python manage.py get_mesh_exe_url","title":"Create a MeshCentral agent invite link"},{"location":"management_cmds/#bulk-update-agent-offlineoverdue-time","text":"wget -q https://raw.githubusercontent.com/wh1te909/tacticalrmm/develop/api/tacticalrmm/agents/management/commands/bulk_change_checkin.py -O /rmm/api/tacticalrmm/agents/management/commands/bulk_change_checkin.py Examples: Change offline time on all agents to 5 minutes python manage.py bulk_change_checkin --offline --all 5 Change overdue time on all agents to 10 minutes python manage.py bulk_change_checkin --overdue --all 10 Change overdue time on all agents in client named Example Client to 12 minutes python manage.py bulk_change_checkin --overdue --client \"Example Client\" 12 Change offline time on all agents in site named Example Site to 2 minutes python manage.py bulk_change_checkin --offline --site \"Example Site\" 2","title":"Bulk update agent offline/overdue time"},{"location":"mesh_integration/","text":"MeshCentral Integration \u00b6 Overview \u00b6 Tactical RMM integrates with MeshCentral for the following 3 functions: Take Control Real time shell Real time file browser At some point in the future, these functions will be directly built into the Tactical Agent, removing the need for MeshCentral. It should be noted that Tactical RMM and MeshCentral are 2 completely separate products and can run independently of each other. They do not even have to run on the same box, however when you install Tactical RMM it simply installs meshcentral for you with some preconfigured settings to allow integration. It is highly recommended to use the MeshCentral instance that Tactical installs, since it allows the developers more control over it and to ensure things don't break. How does it work \u00b6 MeshCentral has an embedding feature that allows integration into existing products. See Section 14 - Embedding MeshCentral in the MeshCentral User Guide for a detailed explanation of how this works. The Tactical RMM Agent keeps track of your Mesh Agents, and periodically interacts with them to synchronize the mesh agent's unique ID with the tactical rmm database. When you do a take control / terminal / file browser on an agent using the Tactical UI, behind the scenes, Tactical generates a login token for meshcentral's website and then \"wraps\" MeshCentral's UI in an iframe for that specific agent only, using it's unique ID to know what agent to render in the iframe.","title":"MeshCentral Integration"},{"location":"mesh_integration/#meshcentral-integration","text":"","title":"MeshCentral Integration"},{"location":"mesh_integration/#overview","text":"Tactical RMM integrates with MeshCentral for the following 3 functions: Take Control Real time shell Real time file browser At some point in the future, these functions will be directly built into the Tactical Agent, removing the need for MeshCentral. It should be noted that Tactical RMM and MeshCentral are 2 completely separate products and can run independently of each other. They do not even have to run on the same box, however when you install Tactical RMM it simply installs meshcentral for you with some preconfigured settings to allow integration. It is highly recommended to use the MeshCentral instance that Tactical installs, since it allows the developers more control over it and to ensure things don't break.","title":"Overview"},{"location":"mesh_integration/#how-does-it-work","text":"MeshCentral has an embedding feature that allows integration into existing products. See Section 14 - Embedding MeshCentral in the MeshCentral User Guide for a detailed explanation of how this works. The Tactical RMM Agent keeps track of your Mesh Agents, and periodically interacts with them to synchronize the mesh agent's unique ID with the tactical rmm database. When you do a take control / terminal / file browser on an agent using the Tactical UI, behind the scenes, Tactical generates a login token for meshcentral's website and then \"wraps\" MeshCentral's UI in an iframe for that specific agent only, using it's unique ID to know what agent to render in the iframe.","title":"How does it work"},{"location":"restore/","text":"Restore \u00b6 Info It is currently not possible to restore to a different domain/subdomain, only to a different physical or virtual server. Danger You must update your old RMM to the latest version using the update.sh script before attempting to restore. Prepare the new server \u00b6 Create the same exact linux user account as you did when you installed the original server. Add it to the sudoers group and setup the firewall. Refer to the installation instructions for steps on how to do all of the above. Change DNS A records \u00b6 Open the DNS manager of wherever your domain is hosted. Change the 3 A records rmm , api and mesh and point them to the public IP of your new server. Run the restore script \u00b6 Copy the backup tar file you created during backup to the new server. Download the restore script. wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/restore.sh chmod +x restore.sh Call the restore script, passing it the backup file as the first argument: ./restore.sh rmm-backup-XXXXXXXXX.tar","title":"Restore"},{"location":"restore/#restore","text":"Info It is currently not possible to restore to a different domain/subdomain, only to a different physical or virtual server. Danger You must update your old RMM to the latest version using the update.sh script before attempting to restore.","title":"Restore"},{"location":"restore/#prepare-the-new-server","text":"Create the same exact linux user account as you did when you installed the original server. Add it to the sudoers group and setup the firewall. Refer to the installation instructions for steps on how to do all of the above.","title":"Prepare the new server"},{"location":"restore/#change-dns-a-records","text":"Open the DNS manager of wherever your domain is hosted. Change the 3 A records rmm , api and mesh and point them to the public IP of your new server.","title":"Change DNS A records"},{"location":"restore/#run-the-restore-script","text":"Copy the backup tar file you created during backup to the new server. Download the restore script. wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/restore.sh chmod +x restore.sh Call the restore script, passing it the backup file as the first argument: ./restore.sh rmm-backup-XXXXXXXXX.tar","title":"Run the restore script"},{"location":"sponsor/","text":"Sponsor Tactical RMM \u00b6 Tactical RMM is an MIT-licensed open-source project maintained by @wh1te909 , @sadnub and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Tactical RMM. Tactical RMM is currently the only open-source RMM available on the market. Responses from a recent survey have rated Tactical RMM as having the fastest and most reliable remote command and script execution compared to all other commercial RMM's. Sponsorships help keep this project alive and motivate the developers to continue to put in more time and effort into the advancement of Tactical RMM. Thousands of hours have been put in to developing, maintaining, improving, and supporting Tactical RMM. Your sponsorship would be greatly appreciated and helpful to keep this project going. Funds donated will be used to setup a company to purchase a code signing certificate to sign all executables that are used by the RMM, costs needed to maintain demo and documentation sites, to support development of new features and the Linux and Mac agents. If you have signed up to be a sponsor and have not been added to the Sponsors role on discord after a few hours, or if your github username is different than your discord username, please DM wh1te909 on Discord after sponsoring to be added to the Sponsors role. We are always looking for feedback and ways to improve Tactical RMM to better address your needs. Please feel free to open a github issue or drop us a message on Discord with your feedback or requests. Sponsor with Github Sponsor with Ko-fi","title":"Sponsor"},{"location":"sponsor/#sponsor-tactical-rmm","text":"Tactical RMM is an MIT-licensed open-source project maintained by @wh1te909 , @sadnub and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Tactical RMM. Tactical RMM is currently the only open-source RMM available on the market. Responses from a recent survey have rated Tactical RMM as having the fastest and most reliable remote command and script execution compared to all other commercial RMM's. Sponsorships help keep this project alive and motivate the developers to continue to put in more time and effort into the advancement of Tactical RMM. Thousands of hours have been put in to developing, maintaining, improving, and supporting Tactical RMM. Your sponsorship would be greatly appreciated and helpful to keep this project going. Funds donated will be used to setup a company to purchase a code signing certificate to sign all executables that are used by the RMM, costs needed to maintain demo and documentation sites, to support development of new features and the Linux and Mac agents. If you have signed up to be a sponsor and have not been added to the Sponsors role on discord after a few hours, or if your github username is different than your discord username, please DM wh1te909 on Discord after sponsoring to be added to the Sponsors role. We are always looking for feedback and ways to improve Tactical RMM to better address your needs. Please feel free to open a github issue or drop us a message on Discord with your feedback or requests. Sponsor with Github Sponsor with Ko-fi","title":"Sponsor Tactical RMM"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 \"Bad credentials\" error when trying to login to the Web UI \u00b6 If you are sure you are using the correct credentials and still getting a \"bad credentials\" error, open your browser's dev tools (ctrl + shift + j on chrome) and check the Console tab to see the real error. It will most probably be a CORS error which means you need to check your DNS settings and make sure whatever computer you're trying to access the UI from resolves your 3 subdomains to the correct IP of the server running the RMM (public IP if running in the cloud, or private IP if running behind NAT). If you see an error about SSL or certificate expired, then your Let's Encrypt cert has probably expired and you'll need to renew it. Refer to the Let's Encrypt cert renewal instructions here Agents not updating \u00b6 The most common problem we've seen of agents not updating is due to Antivirus blocking the updater executable. Windows Defender will 100% of the time block the updater from running unless an exclusion is set. Refer to the Agent Installation instructions for AV exceptions to set and manually doing an agent update with logging to troubleshoot further. Agents will also not automatically update if they are too old. Since Tactical RMM is still in alpha and the developers makes breaking changes pretty frequently, there is no promise of backwards compatibility. If you have agents that are relatively old, you will need to uninstall them manually and reinstall using the latest version. Agents not checking in or showing up / General agent issues \u00b6 Open CMD as admin on the problem computer and stop the agent services: net stop tacticalagent net stop tacticalrpc Run the tacticalagent service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m winagentsvc -log debug -logto stdout Run the tacticalrpc service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m rpc -log debug -logto stdout This will print out a ton of info. You should be able to see the error from the debug log output. Please then copy/paste the logs and post them either in our Discord support chat , or create a github issue . Web UI frozen or not loading / website errors / general errors \u00b6 First, run the update script with the --force flag. This will fix permissions and reinstall python/node packages that might have gotten corrupted. ./update.sh --force Check all the systemd services that the rmm uses to function and check to make sure they're all active/running and enabled: sudo systemctl status rmm sudo systemctl status celery sudo systemctl status celerybeat sudo systemctl status nginx sudo systemctl status nats sudo systemctl status natsapi sudo systemctl status meshcentral sudo systemctl status mongod sudo systemctl status postgresql sudo systemctl status redis Read through the log files in the following folders and check for errors: /rmm/api/tacticalrmm/tacticalrmm/private/log /var/log/celery","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#bad-credentials-error-when-trying-to-login-to-the-web-ui","text":"If you are sure you are using the correct credentials and still getting a \"bad credentials\" error, open your browser's dev tools (ctrl + shift + j on chrome) and check the Console tab to see the real error. It will most probably be a CORS error which means you need to check your DNS settings and make sure whatever computer you're trying to access the UI from resolves your 3 subdomains to the correct IP of the server running the RMM (public IP if running in the cloud, or private IP if running behind NAT). If you see an error about SSL or certificate expired, then your Let's Encrypt cert has probably expired and you'll need to renew it. Refer to the Let's Encrypt cert renewal instructions here","title":"\"Bad credentials\" error when trying to login to the Web UI"},{"location":"troubleshooting/#agents-not-updating","text":"The most common problem we've seen of agents not updating is due to Antivirus blocking the updater executable. Windows Defender will 100% of the time block the updater from running unless an exclusion is set. Refer to the Agent Installation instructions for AV exceptions to set and manually doing an agent update with logging to troubleshoot further. Agents will also not automatically update if they are too old. Since Tactical RMM is still in alpha and the developers makes breaking changes pretty frequently, there is no promise of backwards compatibility. If you have agents that are relatively old, you will need to uninstall them manually and reinstall using the latest version.","title":"Agents not updating"},{"location":"troubleshooting/#agents-not-checking-in-or-showing-up-general-agent-issues","text":"Open CMD as admin on the problem computer and stop the agent services: net stop tacticalagent net stop tacticalrpc Run the tacticalagent service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m winagentsvc -log debug -logto stdout Run the tacticalrpc service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m rpc -log debug -logto stdout This will print out a ton of info. You should be able to see the error from the debug log output. Please then copy/paste the logs and post them either in our Discord support chat , or create a github issue .","title":"Agents not checking in or showing up / General agent issues"},{"location":"troubleshooting/#web-ui-frozen-or-not-loading-website-errors-general-errors","text":"First, run the update script with the --force flag. This will fix permissions and reinstall python/node packages that might have gotten corrupted. ./update.sh --force Check all the systemd services that the rmm uses to function and check to make sure they're all active/running and enabled: sudo systemctl status rmm sudo systemctl status celery sudo systemctl status celerybeat sudo systemctl status nginx sudo systemctl status nats sudo systemctl status natsapi sudo systemctl status meshcentral sudo systemctl status mongod sudo systemctl status postgresql sudo systemctl status redis Read through the log files in the following folders and check for errors: /rmm/api/tacticalrmm/tacticalrmm/private/log /var/log/celery","title":"Web UI frozen or not loading / website errors / general errors"},{"location":"update_agents/","text":"Updating Agents \u00b6 Warning The agent's version is directly tied to the RMM's version. For example, currently RMM version 0.4.17 is compatible with agent version 1.4.6 and lower. You should never attempt to manually update an agent to a newer version without first making sure your RMM is on the latest version. Updating from the Web UI \u00b6 Agents will automatically self update themselves if you have auto self update enabled in Settings > Global Settings There is a background job that runs every hour, at 35 minutes past the hour and sends any online agents an update command if it detects they are on an older version. You can also trigger this background job to run on demand by clicking Agents > Update Agents in the web UI: You can individually choose which agents to update, or simply Select All. The RMM will automatically skip any agents that don't need updating. You can trigger this manual agent update anytime you want. It is safe to spam, and won't run if an agent update task is already running. It will also make sure agents update to the correct version, in case they are an older version that cannot be directly upgraded to the latest version. For example, agents older than version 1.3.0 must first be updated to 1.3.0 before they can go any further. Manually updating from the command line on the agent \u00b6 You should never need to do this but might be needed to troubleshoot agents that are not updating automatically. Download the winagent-vX.X.X.exe executable from the github releases page and place it somewhere on the filesystem. Open CMD as admin and call the exe like so: C:\\Windows\\Temp>winagent-vX.X.X.exe /VERYSILENT /LOG=agentupdate.txt This command will return immediately since it spawns a background process to run the update. The agent will take around 30 seconds to fully update. You can check the agentupdate.txt log file that is created for troubleshooting.","title":"Updating Agents"},{"location":"update_agents/#updating-agents","text":"Warning The agent's version is directly tied to the RMM's version. For example, currently RMM version 0.4.17 is compatible with agent version 1.4.6 and lower. You should never attempt to manually update an agent to a newer version without first making sure your RMM is on the latest version.","title":"Updating Agents"},{"location":"update_agents/#updating-from-the-web-ui","text":"Agents will automatically self update themselves if you have auto self update enabled in Settings > Global Settings There is a background job that runs every hour, at 35 minutes past the hour and sends any online agents an update command if it detects they are on an older version. You can also trigger this background job to run on demand by clicking Agents > Update Agents in the web UI: You can individually choose which agents to update, or simply Select All. The RMM will automatically skip any agents that don't need updating. You can trigger this manual agent update anytime you want. It is safe to spam, and won't run if an agent update task is already running. It will also make sure agents update to the correct version, in case they are an older version that cannot be directly upgraded to the latest version. For example, agents older than version 1.3.0 must first be updated to 1.3.0 before they can go any further.","title":"Updating from the Web UI"},{"location":"update_agents/#manually-updating-from-the-command-line-on-the-agent","text":"You should never need to do this but might be needed to troubleshoot agents that are not updating automatically. Download the winagent-vX.X.X.exe executable from the github releases page and place it somewhere on the filesystem. Open CMD as admin and call the exe like so: C:\\Windows\\Temp>winagent-vX.X.X.exe /VERYSILENT /LOG=agentupdate.txt This command will return immediately since it spawns a background process to run the update. The agent will take around 30 seconds to fully update. You can check the agentupdate.txt log file that is created for troubleshooting.","title":"Manually updating from the command line on the agent"},{"location":"update_docker/","text":"Updating the RMM (Docker) \u00b6 Updating to the latest RMM version \u00b6 Tactical RMM updates the docker images on every release and should be available within a few minutes SSH into your server as a root user and run the below commands: cd [ dir/with/compose/file ] mv docker-compose.yml docker-compose.yml.old wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/docker-compose.yml sudo docker-compose pull sudo docker-compose down sudo docker-compose up -d --remove-orphans Keeping your Let's Encrypt certificate up to date \u00b6 To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Verify the domain with the TXT record. Once issued, run the below commands to base64 encode the certificates and add then to the .env file echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem ) \" >> .env Warning You must remove the old and any duplicate entries for CERT_PUB_KEY and CERT_PRIV_KEY in the .env file Now run sudo docker-compose restart and the new certificate will be in effect","title":"Updating the RMM (Docker)"},{"location":"update_docker/#updating-the-rmm-docker","text":"","title":"Updating the RMM (Docker)"},{"location":"update_docker/#updating-to-the-latest-rmm-version","text":"Tactical RMM updates the docker images on every release and should be available within a few minutes SSH into your server as a root user and run the below commands: cd [ dir/with/compose/file ] mv docker-compose.yml docker-compose.yml.old wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/docker-compose.yml sudo docker-compose pull sudo docker-compose down sudo docker-compose up -d --remove-orphans","title":"Updating to the latest RMM version"},{"location":"update_docker/#keeping-your-lets-encrypt-certificate-up-to-date","text":"To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Verify the domain with the TXT record. Once issued, run the below commands to base64 encode the certificates and add then to the .env file echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem ) \" >> .env Warning You must remove the old and any duplicate entries for CERT_PUB_KEY and CERT_PRIV_KEY in the .env file Now run sudo docker-compose restart and the new certificate will be in effect","title":"Keeping your Let's Encrypt certificate up to date"},{"location":"update_server/","text":"Updating the RMM \u00b6 Keeping your linux server up to date \u00b6 You should periodically run sudo apt update and sudo apt -y upgrade to keep your server up to date. You can also update npm if prompted to by a message that might appear when running the update.sh script. Other than this, you should avoid making any changes to your server and let the update.sh script handle everything else for you. Updating to the latest RMM version \u00b6 Danger Do not attempt to manually edit the update script or any configuration files unless specifically told to by one of the developers. Since this software is completely self hosted and we have no access to your server, we have to assume you have not made any config changes to any of the files or services on your server, and the update script will assume this. You should also never attempt to automate running the update script via cron. The update script will update itself if needed to the latest version when you run it, and them prompt you to run it again. Sometimes, manual intervention will be required during an update in the form of yes/no prompts, so attempting to automate this will ignore these prompts and cause your installation to break. SSH into your server as the linux user you created during install. Never run any update scripts or commands as the root user. This will mess up permissions and break your installation. Download the update script and run it: wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh If you are already on the latest version, the update script will notify you of this and return immediately. You can pass the optional --force flag to the update script to forcefully run through an update, which will bypass the check for latest version. ./update.sh --force This is usefull for a botched update that might have not completed fully. The update script will also fix any permissions that might have gotten messed up during a botched update, or if you accidentally ran the update script as the root user. Warning Do not attempt to manually update MeshCentral to a newer version. You should let the update.sh script handle this for you. The developers will test MeshCentral and make sure integration does not break before bumping the mesh version. Keeping your Let's Encrypt certificate up to date \u00b6 Info Currently, the update script does not automatically renew your Let's Encrypt wildcard certificate, which expires every 3 months, since this is non-trivial to automate using the DNS TXT record method. To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Same instructions as during install for verifying the TXT record has propogated before hitting Enter. After this you have renewed the cert, simply run the update.sh script, passing it the --force flag. ./update.sh --force","title":"Updating the RMM"},{"location":"update_server/#updating-the-rmm","text":"","title":"Updating the RMM"},{"location":"update_server/#keeping-your-linux-server-up-to-date","text":"You should periodically run sudo apt update and sudo apt -y upgrade to keep your server up to date. You can also update npm if prompted to by a message that might appear when running the update.sh script. Other than this, you should avoid making any changes to your server and let the update.sh script handle everything else for you.","title":"Keeping your linux server up to date"},{"location":"update_server/#updating-to-the-latest-rmm-version","text":"Danger Do not attempt to manually edit the update script or any configuration files unless specifically told to by one of the developers. Since this software is completely self hosted and we have no access to your server, we have to assume you have not made any config changes to any of the files or services on your server, and the update script will assume this. You should also never attempt to automate running the update script via cron. The update script will update itself if needed to the latest version when you run it, and them prompt you to run it again. Sometimes, manual intervention will be required during an update in the form of yes/no prompts, so attempting to automate this will ignore these prompts and cause your installation to break. SSH into your server as the linux user you created during install. Never run any update scripts or commands as the root user. This will mess up permissions and break your installation. Download the update script and run it: wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh If you are already on the latest version, the update script will notify you of this and return immediately. You can pass the optional --force flag to the update script to forcefully run through an update, which will bypass the check for latest version. ./update.sh --force This is usefull for a botched update that might have not completed fully. The update script will also fix any permissions that might have gotten messed up during a botched update, or if you accidentally ran the update script as the root user. Warning Do not attempt to manually update MeshCentral to a newer version. You should let the update.sh script handle this for you. The developers will test MeshCentral and make sure integration does not break before bumping the mesh version.","title":"Updating to the latest RMM version"},{"location":"update_server/#keeping-your-lets-encrypt-certificate-up-to-date","text":"Info Currently, the update script does not automatically renew your Let's Encrypt wildcard certificate, which expires every 3 months, since this is non-trivial to automate using the DNS TXT record method. To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Same instructions as during install for verifying the TXT record has propogated before hitting Enter. After this you have renewed the cert, simply run the update.sh script, passing it the --force flag. ./update.sh --force","title":"Keeping your Let's Encrypt certificate up to date"},{"location":"functions/maintenance_mode/","text":"Maintenance Mode \u00b6 Enabling maintenance mode for an agent will prevent any overdue/check/task email/sms alerts from being sent. It will also prevent clients/sites/agents from showing up as red in the dashboard if they have any failing checks or are overdue. To enable maintenance mode for all agents in a client/site, Right Click on a client / site and choose Enable Maintenance Mode To enable maintenance mode for a single agent, Right Click on the agent and choose Enable Maintenance Mode","title":"Maintenance Mode"},{"location":"functions/maintenance_mode/#maintenance-mode","text":"Enabling maintenance mode for an agent will prevent any overdue/check/task email/sms alerts from being sent. It will also prevent clients/sites/agents from showing up as red in the dashboard if they have any failing checks or are overdue. To enable maintenance mode for all agents in a client/site, Right Click on a client / site and choose Enable Maintenance Mode To enable maintenance mode for a single agent, Right Click on the agent and choose Enable Maintenance Mode","title":"Maintenance Mode"},{"location":"functions/remote_bg/","text":"Remote Background \u00b6 To access: Right click on an agent > Remote Background Services Tab \u00b6 Right click on a service to show the context menu where you can start/stop/restart services: Click Service Details to bring up the details tab where you can edit more service options: Processes Tab \u00b6 A very basic task manager that shows real time process usage. Right click on a process to end the task:","title":"Remote Background"},{"location":"functions/remote_bg/#remote-background","text":"To access: Right click on an agent > Remote Background","title":"Remote Background"},{"location":"functions/remote_bg/#services-tab","text":"Right click on a service to show the context menu where you can start/stop/restart services: Click Service Details to bring up the details tab where you can edit more service options:","title":"Services Tab"},{"location":"functions/remote_bg/#processes-tab","text":"A very basic task manager that shows real time process usage. Right click on a process to end the task:","title":"Processes Tab"},{"location":"functions/user_ui/","text":"User Interface Preferences \u00b6 Click on your username at the top right of the dashboard > Preferences:","title":"User Interface Preferences"},{"location":"functions/user_ui/#user-interface-preferences","text":"Click on your username at the top right of the dashboard > Preferences:","title":"User Interface Preferences"}]}